import argparse
import subprocess
import pandas
from SigProfilerAssignment import Analyzer as Analyze


def calculate_contributions(samples_stats, activities):
    return (
        activities
        .set_index('Samples')
        .divide(
            samples_stats
            .set_index('Sample Names')
            .loc[:, 'Total Mutations'],
            axis=0
        )
    )


def copy_inputs(input_folder, output_folder):
    command = f"cp {input_folder}/*.maf {output_folder}/"
    subprocess.call(command, shell=True)


def read_dataframe(file):
    return pandas.read_csv(file, sep='\t')


def remove_inputs(output_folder):
    command = f"rm {output_folder}/*.maf"
    subprocess.call(command, shell=True)


def rename_matrix_generator_output_folder(output_folder):
    command = f"mv {output_folder}/output {output_folder}/Matrix_Generator_output"
    subprocess.call(command, shell=True)


def run_assignment(
    input_folder,
    output_folder,
    input_type="vcf",
    context_type="96",
    version=3.3,
    exome=False,
    genome_build='GRCh37',
    signature_database=None,
    exclude_signature_subgroups=None,
    export_probabilities=True,
    export_probabilities_per_mutation=False,
    make_plots=True,
    sample_reconstruction_plots=None,
    verbose=False
):
    input_folder = f"{input_folder}/" if input_folder[-1] != "/" else input_folder
    output_folder = f"{output_folder}/" if output_folder[-1] != "/" else output_folder

    Analyze.cosmic_fit(
        samples=input_folder,
        output=output_folder,
        input_type=input_type,
        context_type=context_type,
        cosmic_version=version,
        exome=exome,
        genome_build=genome_build,
        signature_database=signature_database,
        exclude_signature_subgroups=exclude_signature_subgroups,
        export_probabilities=export_probabilities,
        export_probabilities_per_mutation=export_probabilities_per_mutation,
        make_plots=make_plots,
        sample_reconstruction_plots=sample_reconstruction_plots,
        verbose=verbose
    )


def write_dataframe(file, output_name):
    file.to_csv(output_name, sep='\t')


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog='SigProfilerAssignment',
        description='Runs SigProfilerAssignment, see their official documentation for more argument details.'
    )
    parser.add_argument(
        '--write-results-per-sample',
        action='store_true',
        help='Produce additional output of signature contributions for each sample'
    )
    parser.add_argument(
        '--input-folder',
        '-i',
        required=True,
        help='equivalent to `samples` parameter'
    )
    parser.add_argument(
        '--output-folder',
        '-o',
        required=True,
        help='equivalent to `output` parameter'
    )
    parser.add_argument(
        '--input-type',
        default='vcf',
        choices=['vcf', "seg:TYPE", "matrix"],
        help='equivalent to `input_type` parameter'
    )
    parser.add_argument(
        '--context-type',
        default='96',
        choices=['96', '288', '1536', 'DINUC', 'ID'],
        help='equivalent to `context_type` parameter'
    ) 
    parser.add_argument(
        '--version',
        default=3.3,
        choices=[1, 2, 3, 3.1, 3.2, 3.3],
        help='equivalent to `cosmic_version` parameter'
    )
    parser.add_argument(
        '--exome',
        action='store_true',
        help='equivalent to `exome` parameter'
    )
    parser.add_argument(
        '--genome-build',
        default='GRCh37',
        choices=['GRCh37', 'GRCh38', 'mm9', 'mm10', 'rn6'],
        help='equivalent to `genome_build` parameter'
    )
    parser.add_argument(
        '--signature-database',
        help='equivalent to `signature_database` parameter'
    )
    parser.add_argument(
        '--exclude-signature-subgroups',
        default=None,
        help='equivalent to `exclude_signature_subgroups` parameter'
    )
    parser.add_argument(
        '--do-not-export-probabilities',
        action='store_true',
        help='equivalent to `export_probabilities` parameter, probabilities are exported by default'
    )
    parser.add_argument(
        '--export-probabilities-per-mutation',
        action='store_true',
        help='equivalent to `export_probabilities_per_mutation` parameter, applicable to `vcf` `input_type`'
    )
    parser.add_argument(
        '--disable-plotting',
        action='store_true',
        help='used for `make_plots` parameter, plots are generated by default'
    )
    parser.add_argument(
        '--sample-reconstruction-plots-format',
        default=None,
        choices=['pdf', 'png', 'both', None],
        help='specify format for `sample_reconstruction_plots` parameter'
    )
    parser.add_argument(
        '--verbose',
        action='store_true',
        help='equivalent to `verbose` parameter'
    )
    # add argument to split up outputs by sample
    args = parser.parse_args()

    subprocess.call(f"mkdir -p {args.output_folder}", shell=True)
    # There is a bug(?) with SigProfilerAnalyzer 0.0.32 and/or SigProfilerMatrixGenerator v.1.2.18
    # where some outputs are placed in the input folder. This was not the case previously
    # but I cannot find documentation in their release notes. Maybe I was doing something wrong! So, hence this dance
    # of copy inputs to output folder > run with both input_folder and output_folder arguments pointing to the output
    # folder, and then remove the copied set of input files.
    copy_inputs(args.input_folder, args.output_folder)
    run_assignment(
        input_folder=args.output_folder,
        output_folder=args.output_folder,
        input_type=args.input_type,
        context_type=args.context_type,
        version=args.version,
        exome=args.exome,
        genome_build=args.genome_build,
        signature_database=args.signature_database,
        exclude_signature_subgroups=args.exclude_signature_subgroups,
        export_probabilities=False if args.do_not_export_probabilities else True,
        export_probabilities_per_mutation=args.export_probabilities_per_mutation,
        make_plots=False if args.disable_plotting else True,
        sample_reconstruction_plots=args.sample_reconstruction_plots_format,
        verbose=args.verbose
    )
    remove_inputs(args.output_folder)

    solution_samples_stats_file = "Assignment_Solution/Solution_Stats/Assignment_Solution_Samples_Stats.txt"
    solution_samples_stats = read_dataframe(f"{args.output_folder}/{solution_samples_stats_file}")

    solution_activities_file = "Assignment_Solution/Activities/Assignment_Solution_Activities.txt"
    solution_activities = read_dataframe(f"{args.output_folder}/{solution_activities_file}")

    signature_contributions = calculate_contributions(solution_samples_stats, solution_activities)
    write_dataframe(signature_contributions, f'{args.output_folder}/SBS_contributions.txt')

    if args.write_results_per_sample:
        subprocess.call(f"mkdir -p {args.output_folder}/SBS_sample_contributions/", shell=True)
        for sample in signature_contributions.index:
            sample_output = signature_contributions.loc[sample, :].to_frame().reset_index()
            sample_output.columns = ['signature', 'contribution']
            sample_output_name = f"{args.output_folder}/SBS_sample_contributions/{sample}.SBS_contributions.txt"
            write_dataframe(sample_output, output_name=sample_output_name)

    rename_matrix_generator_output_folder(args.output_folder)
